   Compiling risk v0.1.0 (/Users/antoine/Documents/risk)
warning: unused import: `chumsky::combinator::MapWithSpan`
 --> src/parser/mod.rs:2:5
  |
2 | use chumsky::combinator::MapWithSpan;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: the item `Parser` is imported redundantly
 --> src/parser/mod.rs:3:5
  |
3 | use chumsky::Parser;
  |     ^^^^^^^^^^^^^^^
4 | use chumsky::prelude::*;
  |     ------------------- the item `Parser` is already imported here

warning: unused import: `chumsky::primitive::Choice`
 --> src/parser/mod.rs:5:5
  |
5 | use chumsky::primitive::Choice;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `App`
 --> src/parser/mod.rs:7:18
  |
7 | use crate::ast::{App, Bool, Expr, Identifier, Literal};
  |                  ^^^

warning: unused import: `crate::ast::Program`
 --> src/parser/mod.rs:9:5
  |
9 | use crate::ast::Program;
  |     ^^^^^^^^^^^^^^^^^^^

warning: associated function `new` is never used
  --> src/ast/mod.rs:10:12
   |
9  | impl Span {
   | --------- associated function in this implementation
10 |     pub fn new(start: usize, end: usize) -> Self {
   |            ^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: variants `Bind`, `TypeDecl`, and `TypeAssign` are never constructed
  --> src/ast/mod.rs:29:5
   |
28 | pub enum Statment {
   |          -------- variants in this enum
29 |     Bind(Bind),
   |     ^^^^
30 |     TypeDecl(TypeDecl),
   |     ^^^^^^^^
31 |     TypeAssign(TypeAssign)
   |     ^^^^^^^^^^
   |
   = note: `Statment` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: multiple variants are never constructed
  --> src/ast/mod.rs:36:5
   |
35 | pub enum Expr {
   |          ---- variants in this enum
36 |     Identifier(Identifier), // e.g. foo
   |     ^^^^^^^^^^
37 |     Id(Identifier), // e.g.  Maybe
38 |     App(App),
   |     ^^^
39 |     Condition(Box<Expr>, Box<Expr>, Box<Expr>, Span),
   |     ^^^^^^^^^
40 |     Let(Vec<Bind>, Box<Expr>, Span),
   |     ^^^
41 |     Match(Box<Expr>, Vec<(Box<Pattern>, Box<Expr>)>, Span),
   |     ^^^^^
42 |     Literal(Literal),
43 |     BinOp(BinOp, Box<Expr>, Box<Expr>, Span),
   |     ^^^^^
44 |     Lambda(Vec<Pattern>, Box<Expr>, Span),
   |     ^^^^^^
45 |     Ann(Box<Expr>, Type, Span),
   |     ^^^
46 |     List(Vec<Expr>, Span),
   |     ^^^^
47 |     Tuple(Vec<Expr>, Span),
   |     ^^^^^
   |
   = note: `Expr` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: method `get_span` is never used
  --> src/ast/mod.rs:52:12
   |
51 | impl Expr {
   | --------- method in this implementation
52 |     pub fn get_span(&self) -> &Span {
   |            ^^^^^^^^

warning: associated function `new` is never used
  --> src/ast/mod.rs:80:12
   |
79 | impl App {
   | -------- associated function in this implementation
80 |     pub fn new(expr: Expr, args: Vec<Expr>, span: Span) -> Self {
   |            ^^^

warning: associated function `new` is never used
  --> src/ast/mod.rs:99:12
   |
98 | impl TypeAssign {
   | --------------- associated function in this implementation
99 |     pub fn new(id: Identifier, ty: Type, span: Span) -> Self {
   |            ^^^

warning: associated function `new` is never used
   --> src/ast/mod.rs:126:12
    |
125 | impl Identifier {
    | --------------- associated function in this implementation
126 |     pub fn new(name: String, span: Span) -> Self {
    |            ^^^

warning: multiple variants are never constructed
   --> src/ast/mod.rs:138:5
    |
137 | pub enum BinOp {
    |          ----- variants in this enum
138 |     Add,
    |     ^^^
139 |     Sub,
    |     ^^^
140 |     Div,
    |     ^^^
141 |     Mul,
    |     ^^^
142 |     Mod,
    |     ^^^
143 |     Exp,
    |     ^^^
144 |     LessThan,
    |     ^^^^^^^^
145 |     GreaterThan,
    |     ^^^^^^^^^^^
146 |     LessThanOrEq,
    |     ^^^^^^^^^^^^
147 |     GreaterThanOrEq,
    |     ^^^^^^^^^^^^^^^
148 |     Eq,
    |     ^^
149 |     Ineq,
    |     ^^^^
150 |     And,
    |     ^^^
151 |     Or,
    |     ^^
152 |     ListCons
    |     ^^^^^^^^
    |
    = note: `BinOp` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/ast/mod.rs:164:12
    |
163 | impl Variant {
    | ------------ associated function in this implementation
164 |     pub fn new(id: Identifier, types: Vec<Type>) -> Self {
    |            ^^^

warning: associated function `new` is never used
   --> src/ast/mod.rs:180:12
    |
179 | impl TypeDecl {
    | ------------- associated function in this implementation
180 |     pub fn new(name: Identifier, typevars: Vec<Identifier>, variants: Vec<Variant>) -> Self {
    |            ^^^

warning: variants `Generic`, `Id`, `App`, `Tuple`, and `Func` are never constructed
   --> src/ast/mod.rs:193:5
    |
192 | pub enum Type {
    |          ---- variants in this enum
193 |     Generic(Identifier),
    |     ^^^^^^^
194 |     Id(Identifier),
    |     ^^
195 |     App(Identifier, Vec<Type>, Span),
    |     ^^^
196 |     Tuple(Vec<Type>, Span),
    |     ^^^^^
197 |     Func(Box<Type>, Vec<Type>, Span)
    |     ^^^^
    |
    = note: `Type` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: method `get_span` is never used
   --> src/ast/mod.rs:201:12
    |
200 | impl Type {
    | --------- method in this implementation
201 |     pub fn get_span(&self) -> &Span {
    |            ^^^^^^^^

warning: variants `ListCons`, `Wildcard`, `Variable`, `Id`, `App`, and `Literal` are never constructed
   --> src/ast/mod.rs:216:5
    |
215 | pub enum Pattern {
    |          ------- variants in this enum
216 |     ListCons(Box<Pattern>, Box<Pattern>, Span),
    |     ^^^^^^^^
217 |     Wildcard(Span),
    |     ^^^^^^^^
218 |     Variable(Identifier),
    |     ^^^^^^^^
219 |     Id(Identifier),
    |     ^^
220 |     App(Identifier, Vec<Type>, Span),
    |     ^^^
221 |     Literal(Literal)
    |     ^^^^^^^
    |
    = note: `Pattern` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: method `get_span` is never used
   --> src/ast/mod.rs:225:12
    |
224 | impl Pattern {
    | ------------ method in this implementation
225 |     pub fn get_span(&self) -> &Span {
    |            ^^^^^^^^

warning: associated function `new` is never used
   --> src/ast/mod.rs:266:12
    |
265 | impl Program {
    | ------------ associated function in this implementation
266 |     pub fn new(statements: Vec<Statment>) -> Self {
    |            ^^^

warning: `risk` (bin "risk") generated 20 warnings (run `cargo fix --bin "risk"` to apply 4 suggestions)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.84s
     Running `target/debug/risk`
